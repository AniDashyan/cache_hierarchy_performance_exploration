name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Install MSVC Runtime (Windows)
      if: matrix.os == 'windows-latest'
      run: choco install vcredist-all -y
      shell: powershell

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        elif [ "${{ matrix.os }}" == "windows-latest" ]; then
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        fi

    - name: Configure CMake
      shell: bash
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -S ${{ github.workspace }}

    - name: Build
      shell: ${{ matrix.os == 'windows-latest' && 'cmd' || 'bash' }}
      run: |
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      shell: ${{ matrix.os == 'windows-latest' && 'cmd' || 'bash' }}
      run: |
        dir
        ctest --build-config ${{ matrix.build_type }} --verbose

    - name: Run Built Application on Ubuntu
      if: matrix.os == 'ubuntu-latest'
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: |
        ./main

    - name: Run Built Application on Windows
      if: matrix.os == 'windows-latest'
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      shell: cmd
      run: |
        dir
        if exist ${{ matrix.build_type }}\main.exe (
          ${{ matrix.build_type }}\main.exe
        ) else (
          echo "main.exe not found in expected directory"
          exit 1
        )
